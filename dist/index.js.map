{
  "version": 3,
  "sources": ["../lib/async.js", "../lib/sync.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isUint8Array = require( '@stdlib/assert-is-uint8array' );\nvar readFile = require( '@stdlib/fs-read-file' );\nvar Uint8Array = require( '@stdlib/array-uint8' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Reads the entire contents of a WebAssembly file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {Options} [options] - options\n* @param {string} [options.flag] - file status flag\n* @param {Callback} clbk - callback to invoke after reading a file\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var join = require( 'path' ).join;\n* var instanceOf = require( '@stdlib/assert-instance-of' );\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* readWASM( fpath, onRead );\n*\n* function onRead( error, buf ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( buf );\n* }\n*/\nfunction readWASM( file, options, clbk ) {\n\tvar opts;\n\tvar done;\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tdone = options;\n\t} else {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = options;\n\t\tdone = clbk;\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t}\n\t// Always override setting the encoding option, as wasm is a binary file format:\n\topts.encoding = null;\n\treadFile( file, opts, onRead );\n\n\t/**\n\t* Callback invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {(Buffer|string)} file - file contents\n\t* @returns {void}\n\t*/\n\tfunction onRead( error, file ) {\n\t\tvar out;\n\t\tvar i;\n\t\tif ( error ) {\n\t\t\treturn done( error );\n\t\t}\n\t\tif ( isUint8Array( file ) ) {\n\t\t\treturn done( null, file );\n\t\t}\n\t\t// Handle older Node.js environments where Buffer objects are not Uint8Arrays...\n\t\tout = new Uint8Array( file.length );\n\t\tfor ( i = 0; i < file.length; i++ ) {\n\t\t\tout[ i ] = file[ i ];\n\t\t}\n\t\tdone( null, out );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = readWASM;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isUint8Array = require( '@stdlib/assert-is-uint8array' );\nvar instanceOf = require( '@stdlib/assert-instance-of' );\nvar readFileSync = require( '@stdlib/fs-read-file' ).sync;\nvar Uint8Array = require( '@stdlib/array-uint8' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Synchronously reads the entire contents of a WebAssembly file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {Options} [options] - options\n* @param {string} [options.flag] - file status flag\n* @throws {TypeError} options argument must be an object\n* @returns {(Uint8Array|Error)} file contents or an error\n*\n* @example\n* var join = require( 'path' ).join;\n* var instanceOf = require( '@stdlib/assert-instance-of' );\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* var out = readWASMSync( fpath );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.log( out );\n*/\nfunction readWASMSync( file, options ) {\n\tvar opts;\n\tvar out;\n\tvar f;\n\tvar i;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\t// Always override setting the encoding option, as wasm is a binary file format:\n\topts.encoding = null;\n\tf = readFileSync( file, opts );\n\tif ( instanceOf( f, Error ) ) {\n\t\treturn f;\n\t}\n\tif ( isUint8Array( f ) ) {\n\t\treturn f;\n\t}\n\t// Handle older Node.js environments where Buffer objects are not Uint8Arrays...\n\tout = new Uint8Array( f.length );\n\tfor ( i = 0; i < f.length; i++ ) {\n\t\tout[ i ] = f[ i ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = readWASMSync;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read the entire contents of a WebAssembly file.\n*\n* @module @stdlib/fs-read-wasm\n*\n* @example\n* var join = require( 'path' ).join;\n* var readWASM = require( '@stdlib/fs-read-wasm' );\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* readWASM( fpath, onRead );\n*\n* function onRead( error, buf ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( out );\n* }\n*\n* @example\n* var join = require( 'path' ).join;\n* var instanceOf = require( '@stdlib/assert-instance-of' );\n* var readWASMSync = require( '@stdlib/fs-read-wasm' ).sync;\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* var out = readWASMSync( fpath );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.log( out );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar readWASM = require( './async.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( readWASM, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = readWASM;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,gCAAiC,EACrDC,EAAa,QAAS,4BAA6B,EACnDC,EAAe,QAAS,8BAA+B,EACvDC,EAAW,QAAS,sBAAuB,EAC3CC,EAAa,QAAS,qBAAsB,EAC5CC,EAAS,QAAS,uBAAwB,EA6B9C,SAASC,EAAUC,EAAMC,EAASC,EAAO,CACxC,IAAIC,EACAC,EACJ,GAAK,UAAU,OAAS,EACvBD,EAAO,CAAC,EACRC,EAAOH,MACD,CACN,GAAK,CAACR,EAAUQ,CAAQ,EACvB,MAAM,IAAI,UAAWH,EAAQ,qEAAsEG,CAAQ,CAAE,EAE9GE,EAAOF,EACPG,EAAOF,CACR,CACA,GAAK,CAACR,EAAYU,CAAK,EACtB,MAAM,IAAI,UAAWN,EAAQ,uEAAwEM,CAAK,CAAE,EAG7GD,EAAK,SAAW,KAChBP,EAAUI,EAAMG,EAAME,CAAO,EAU7B,SAASA,EAAQC,EAAON,EAAO,CAC9B,IAAIO,EACAC,EACJ,GAAKF,EACJ,OAAOF,EAAME,CAAM,EAEpB,GAAKX,EAAcK,CAAK,EACvB,OAAOI,EAAM,KAAMJ,CAAK,EAIzB,IADAO,EAAM,IAAIV,EAAYG,EAAK,MAAO,EAC5BQ,EAAI,EAAGA,EAAIR,EAAK,OAAQQ,IAC7BD,EAAKC,CAAE,EAAIR,EAAMQ,CAAE,EAEpBJ,EAAM,KAAMG,CAAI,CACjB,CACD,CAKAf,EAAO,QAAUO,ICzGjB,IAAAU,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,gCAAiC,EACrDC,EAAe,QAAS,8BAA+B,EACvDC,EAAa,QAAS,4BAA6B,EACnDC,EAAe,QAAS,sBAAuB,EAAE,KACjDC,EAAa,QAAS,qBAAsB,EAC5CC,EAAS,QAAS,uBAAwB,EAyB9C,SAASC,EAAcC,EAAMC,EAAU,CACtC,IAAIC,EACAC,EACAC,EACAC,EACJ,GAAK,UAAU,OAAS,EAAI,CAC3B,GAAK,CAACZ,EAAUQ,CAAQ,EACvB,MAAM,IAAI,UAAWH,EAAQ,qEAAsEG,CAAQ,CAAE,EAE9GC,EAAOD,CACR,MACCC,EAAO,CAAC,EAQT,GALAA,EAAK,SAAW,KAChBE,EAAIR,EAAcI,EAAME,CAAK,EACxBP,EAAYS,EAAG,KAAM,GAGrBV,EAAcU,CAAE,EACpB,OAAOA,EAIR,IADAD,EAAM,IAAIN,EAAYO,EAAE,MAAO,EACzBC,EAAI,EAAGA,EAAID,EAAE,OAAQC,IAC1BF,EAAKE,CAAE,EAAID,EAAGC,CAAE,EAEjB,OAAOF,CACR,CAKAX,EAAO,QAAUO,IC/BjB,IAAIO,EAAc,QAAS,uDAAwD,EAC/EC,EAAW,IACXC,EAAO,IAKXF,EAAaC,EAAU,OAAQC,CAAK,EAKpC,OAAO,QAAUD",
  "names": ["require_async", "__commonJSMin", "exports", "module", "isObject", "isFunction", "isUint8Array", "readFile", "Uint8Array", "format", "readWASM", "file", "options", "clbk", "opts", "done", "onRead", "error", "out", "i", "require_sync", "__commonJSMin", "exports", "module", "isObject", "isUint8Array", "instanceOf", "readFileSync", "Uint8Array", "format", "readWASMSync", "file", "options", "opts", "out", "f", "i", "setReadOnly", "readWASM", "sync"]
}
