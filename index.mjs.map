{"version":3,"file":"index.mjs","sources":["../lib/async.js","../lib/sync.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object' ;\nimport isFunction from '@stdlib/assert-is-function' ;\nimport isUint8Array from '@stdlib/assert-is-uint8array' ;\nimport readFile from '@stdlib/fs-read-file' ;\nimport Uint8Array from '@stdlib/array-uint8' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Reads the entire contents of a WebAssembly file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {Options} [options] - options\n* @param {string} [options.flag] - file status flag\n* @param {Callback} clbk - callback to invoke after reading a file\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* import { join as join } from 'path' ;\n* import instanceOf from '@stdlib/assert-instance-of' ;\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* readWASM( fpath, onRead );\n*\n* function onRead( error, buf ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( buf );\n* }\n*/\nfunction readWASM( file, options, clbk ) {\n\tvar opts;\n\tvar done;\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tdone = options;\n\t} else {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( '0C42h', options ) );\n\t\t}\n\t\topts = options;\n\t\tdone = clbk;\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( '0C42n', done ) );\n\t}\n\t// Always override setting the encoding option, as wasm is a binary file format:\n\topts.encoding = null;\n\treadFile( file, opts, onRead );\n\n\t/**\n\t* Callback invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {(Buffer|string)} file - file contents\n\t* @returns {void}\n\t*/\n\tfunction onRead( error, file ) {\n\t\tvar out;\n\t\tvar i;\n\t\tif ( error ) {\n\t\t\treturn done( error );\n\t\t}\n\t\tif ( isUint8Array( file ) ) {\n\t\t\treturn done( null, file );\n\t\t}\n\t\t// Handle older Node.js environments where Buffer objects are not Uint8Arrays...\n\t\tout = new Uint8Array( file.length );\n\t\tfor ( i = 0; i < file.length; i++ ) {\n\t\t\tout[ i ] = file[ i ];\n\t\t}\n\t\tdone( null, out );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default readWASM;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object' ;\nimport isUint8Array from '@stdlib/assert-is-uint8array' ;\nimport instanceOf from '@stdlib/assert-instance-of' ;\nimport { sync as readFileSync } from '@stdlib/fs-read-file' ;\nimport Uint8Array from '@stdlib/array-uint8' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Synchronously reads the entire contents of a WebAssembly file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {Options} [options] - options\n* @param {string} [options.flag] - file status flag\n* @throws {TypeError} options argument must be an object\n* @returns {(Uint8Array|Error)} file contents or an error\n*\n* @example\n* import { join as join } from 'path' ;\n* import instanceOf from '@stdlib/assert-instance-of' ;\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* var out = readWASMSync( fpath );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.log( out );\n*/\nfunction readWASMSync( file, options ) {\n\tvar opts;\n\tvar out;\n\tvar f;\n\tvar i;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( '0C42h', options ) );\n\t\t}\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\t// Always override setting the encoding option, as wasm is a binary file format:\n\topts.encoding = null;\n\tf = readFileSync( file, opts );\n\tif ( instanceOf( f, Error ) ) {\n\t\treturn f;\n\t}\n\tif ( isUint8Array( f ) ) {\n\t\treturn f;\n\t}\n\t// Handle older Node.js environments where Buffer objects are not Uint8Arrays...\n\tout = new Uint8Array( f.length );\n\tfor ( i = 0; i < f.length; i++ ) {\n\t\tout[ i ] = f[ i ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default readWASMSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read the entire contents of a WebAssembly file.\n*\n* @module @stdlib/fs-read-wasm\n*\n* @example\n* import { join as join } from 'path' ;\n* import readWASM from '@stdlib/fs-read-wasm' ;\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* readWASM( fpath, onRead );\n*\n* function onRead( error, buf ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( out );\n* }\n*\n* @example\n* import { join as join } from 'path' ;\n* import instanceOf from '@stdlib/assert-instance-of' ;\n* import { sync as readWASMSync } from '@stdlib/fs-read-wasm' ;\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* var out = readWASMSync( fpath );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.log( out );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport readWASM from './async.js' ;\nimport sync from './sync.js' ;\n\n\n// MAIN //\n\nsetReadOnly( readWASM, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default readWASM;\n"],"names":["readWASM","file","options","clbk","opts","done","arguments","length","isObject","TypeError","format","isFunction","onRead","error","out","i","isUint8Array","Uint8Array","encoding","readFile","readWASMSync","f","readFileSync","instanceOf","Error","setReadOnly","sync"],"mappings":";;0tBAwDA,SAASA,EAAUC,EAAMC,EAASC,GACjC,IAAIC,EACAC,EACJ,GAAKC,UAAUC,OAAS,EACvBH,EAAO,CAAA,EACPC,EAAOH,MACD,CACN,IAAMM,EAAUN,GACf,MAAM,IAAIO,UAAWC,EAAQ,QAASR,IAEvCE,EAAOF,EACPG,EAAOF,CACP,CACD,IAAMQ,EAAYN,GACjB,MAAM,IAAII,UAAWC,EAAQ,QAASL,IAcvC,SAASO,EAAQC,EAAOZ,GACvB,IAAIa,EACAC,EACJ,GAAKF,EACJ,OAAOR,EAAMQ,GAEd,GAAKG,EAAcf,GAClB,OAAOI,EAAM,KAAMJ,GAIpB,IADAa,EAAM,IAAIG,EAAYhB,EAAKM,QACrBQ,EAAI,EAAGA,EAAId,EAAKM,OAAQQ,IAC7BD,EAAKC,GAAMd,EAAMc,GAElBV,EAAM,KAAMS,EACZ,CA1BDV,EAAKc,SAAW,KAChBC,EAAUlB,EAAMG,EAAMQ,EA0BvB,CChDA,SAASQ,EAAcnB,EAAMC,GAC5B,IAAIE,EACAU,EACAO,EACAN,EACJ,GAAKT,UAAUC,OAAS,EAAI,CAC3B,IAAMC,EAAUN,GACf,MAAM,IAAIO,UAAWC,EAAQ,QAASR,IAEvCE,EAAOF,CACT,MACEE,EAAO,CAAA,EAKR,GAFAA,EAAKc,SAAW,KAChBG,EAAIC,EAAcrB,EAAMG,GACnBmB,EAAYF,EAAGG,OACnB,OAAOH,EAER,GAAKL,EAAcK,GAClB,OAAOA,EAIR,IADAP,EAAM,IAAIG,EAAYI,EAAEd,QAClBQ,EAAI,EAAGA,EAAIM,EAAEd,OAAQQ,IAC1BD,EAAKC,GAAMM,EAAGN,GAEf,OAAOD,CACR,CCnBAW,EAAAzB,EAAA,OAAA0B"}